// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'checkstyle'

buildscript {
    ext.kotlin_version = '1.8.22'
    repositories {
        mavenCentral()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.bjoernq:unmockplugin:0.7.8'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.0"
        classpath 'com.puppycrawl.tools:checkstyle:8.44'
    }


}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    task checkstyle(type: Checkstyle) {
        showViolations = true
        configFile = file('../app/checkstyle.xml')

        source 'libraries/liblexica/main/java/com/serwylo/lexica/game'
        include '**/*.java'
        exclude '**/gen/**'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'
        classpath = files()
        //Failing the build
        ignoreFailures = false
    }

    tasks.matching { task -> task.name.startsWith('preBuild') }.configureEach {
        dependsOn 'checkstyle'
    }

//    project.afterEvaluate {
//        preBuild.dependsOn 'checkstyle'
//    }
    configurations.all {
        resolutionStrategy {
            force 'org.xerial:sqlite-jdbc:3.34.0'
        }
    }
}


// NOTE: The below tasks are a little bit hacky. The optimal solution would be to have a nice
// gradle plugin whose source lives in the libraries/ directory, and which the app/ project
// depends on. However, I couldn't figure out how to have a gradle plugin in the same project
// as another gradle build which depended on that plugin.

task buildLanguageAnalysis(type: GradleBuild) {
    buildFile = file('libraries/language-analysis/build.gradle')
    tasks = ['shadowJar']
}

task buildTrieBuilder(type: GradleBuild) {
    buildFile = file('libraries/trie-builder/build.gradle')
    tasks = ['shadowJar']
}

task buildTrieLib(type: GradleBuild) {
    buildFile = file('libraries/trie/build.gradle')
    tasks = ['build']
}

task buildDictionaries

def languages = [
  "br_no_diacritics",
  "ca",
  "de_DE",
  "de_DE_no_diacritics",
  "en_US",
  "en_GB",
  "es",
  "es_solo_enne",
  "fa",
  "fi",
  "fr_FR",
  "fr_FR_no_diacritics",
  "hu",
  "it",
  "ja",
  "nl",
  "pl",
  "pt_BR",
  "pt_BR_no_diacritics",
  "ru",
  "ru_extended",
  "tr",
  "uk",
]
languages.each { lang ->

    def langTask = task "buildDictionary_${lang}"(dependsOn: buildTrieBuilder, type: JavaExec) {
        main = 'com.serwylo.lexica.trie.TrieBuilderApp'
        classpath 'libraries/trie-builder/build/libs/trie-builder-all.jar'
        args = [
                lang,
                file('assets/dictionaries/'),
                file('app/src/main/res/raw/'),
                file('app/src/test/resources/'),
        ]

        outputs.files([
                "app/src/main/res/raw/words_${lang}.bin",
                "app/src/test/resources/words_${lang}.bin",
	])
    }

    buildDictionaries.dependsOn << langTask

    task "analyseLanguage_${lang}"(dependsOn: [buildLanguageAnalysis, langTask], type: JavaExec) {
        main = 'com.serwylo.lexica.language.LanguageAnalysisApp'
        classpath 'libraries/language-analysis/build/libs/language-analysis-all.jar'
        args = [
                lang,
                file('app/src/main/res/raw/'),
                file('assets/dictionaries/'),
                file('/tmp/'),
        ]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
